import React, { useState } from "react";
import { useSelector } from "react-redux";
import { RootState } from "../../reducers";
import SearchIcon from "../../assets/icons/search.icon";
import { IVault } from "../../types/types";
import { fromWei, parseJSONToObject } from "../../utils";
import millify from "millify";
import "../../styles/Vulnerability/ProjectSelect.scss";
import Loading from "../Shared/Loading";
import { AccordionContext } from "./VulnerabilityAccordion";

interface IProps {
  data: {
    projectId: string
  }
}

export default function ProjectSelect(props: IProps) {
  const [userInput, setUserInput] = useState("");
  const vaultsData = useSelector((state: RootState) => state.dataReducer.vaults);
  const { submitCard } = React.useContext(AccordionContext);

  const vaults = vaultsData.map((vault: IVault, index: number) => {
    const description = parseJSONToObject(vault?.description as string);
    const projectName = vault.name;
    if (projectName?.toLowerCase().includes(userInput.toLowerCase()) && !vault.parentVault.liquidityPool && vault.parentVault.registered) {
      return (
        <tr key={index} className={props.data.projectId === vault.id ? " project-row selected" : "project-row"} onClick={() => submitCard(1, {
          projectName: projectName,
          projectId: vault.id
        })}>
          <td className="project-name-wrapper"><img className="project-logo" src={description?.["project-metadata"].icon} alt="project logo" />{projectName}</td>
          <td>{millify(Number(fromWei(vault.parentVault.honeyPotBalance, vault.parentVault.stakingTokenDecimals)), { precision: 3 })}</td>
        </tr>
      )
    }
    return undefined;
  })

  return <div className="project-select-wrapper">
    {vaults.length === 0 ? <Loading /> :
      <>
        <div className="search-wrapper">
          <SearchIcon />
          <input type="text" placeholder="Search project or select form list" onChange={(e) => setUserInput(e.target.value)} />
        </div>

        {vaults.every((value: any) => value === undefined) ?
          <div className="no-results">No projects found</div> :
          <div className="table-wrapper">
            <table>
              <tbody>
                <tr>
                  <th>PROJECT NAME</th>
                  <th>VAULT TOTAL</th>
                </tr>
                {vaults}
              </tbody>
            </table>
          </div>}
      </>}
  </div>
}
